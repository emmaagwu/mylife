datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  coreIdentity    CoreIdentity?
  quotes          Quote[]
  books           Book[]
  mentors         Mentor[]
  plans           Plan[]
  media           Media[]
  visionBoard     VisionBoard[]
  preferences     UserPreferences?
  roles           Role[]
  goals           Goal[]
  timeBlocks      TimeBlock[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
} 

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CoreIdentity {
  id            String   @id @default(cuid())
  userId        String
  statement     String?
  values        String[]
  mission       String?
  vision        String?
  purpose       String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId])
}

model Quote {
  id        String   @id @default(cuid())
  userId    String
  text      String
  author    String
  isFavorite Boolean @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          String   @id @default(cuid())
  userId      String
  title       String
  author      String
  progress    Int      @default(0)
  coverUrl    String?
  notes       String?
  status      String   @default("READING") // READING, COMPLETED, WISHLIST
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mentor {
  id          String   @id @default(cuid())
  userId      String
  name        String
  expertise   String
  socialMedia Json?    // Store social media links
  notes       String?
  imageUrl    String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id          String   @id @default(cuid())
  userId      String
  type        String   // DECADE, YEAR5, YEAR1, MONTH6, MONTH1, WEEK
  title       String
  description String?
  goals       Json
  startDate   DateTime
  endDate     DateTime
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, ARCHIVED
  role        String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  userId      String
  type        String   // AUDIO, VIDEO
  title       String
  url         String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VisionBoard {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String
  theme         String   @default("light")
  audioEnabled  Boolean  @default(false)
  audioUrl      String?
  notifications Json?    // Store notification preferences
  layout        Json?    // Store layout preferences
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId])
}

model Role {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  icon        String?  // For role visualization
  color       String?  // For UI customization
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goals       Goal[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  roleId      String
  title       String
  description String?
  timeline    Timeline   @default(ONE_YEAR)
  priority    Priority   @default(IMPORTANT_NOT_URGENT)
  deadline    DateTime?
  status      GoalStatus @default(IN_PROGRESS)
  progress    Int        @default(0) // 0-100 percentage
  isArchived  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  timeBlocks  TimeBlock[]
  role        Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
}

model TimeBlock {
  id          String   @id @default(cuid())
  userId      String
  goalId      String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isCompleted Boolean  @default(false)
  isRecurring Boolean  @default(false)
  recurrence  String?  // JSON string for recurrence rules
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goal        Goal?    @relation(fields: [goalId], references: [id], onDelete: SetNull)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([goalId])
}

enum Timeline {
  TEN_YEARS
  FIVE_YEARS
  ONE_YEAR
  ONE_MONTH
  ONE_WEEK
  TODAY
}

enum Priority {
  IMPORTANT_URGENT
  IMPORTANT_NOT_URGENT
  NOT_IMPORTANT_URGENT
  NOT_IMPORTANT_NOT_URGENT
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}